generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String?
  picture           String?
  isGoogle          Boolean   @default(false)
  phone             String?
  isEmailVerified   Boolean   @default(false)
  resetToken        String?
  resetTokenExpiry  DateTime?
  emailVerifyToken  String?
  emailVerifyExpiry DateTime?
  rememberToken     String?
  isAdmin           Boolean   @default(false) // Buat admin dashboard
  deletedAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  orders       Order[]
  cart         Cart[]
  testimonials Testimonial[]
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  image       String
  available   Boolean  @default(true)
  deadline    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relasi
  orders       Order[]
  carts        Cart[]
  testimonials ServiceTestimonial[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
}

model Order {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  service   Service   @relation(fields: [serviceId], references: [id])
  serviceId Int
  total     Float
  status    String    @default("pending") // pending, success, failed, etc.
  paidAt    DateTime?
  createdAt DateTime  @default(now())
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  rating    Int // Optional: 1-5
  createdAt DateTime @default(now())

  serviceTestimonial ServiceTestimonial[]
}

model ServiceTestimonial {
  id            Int         @id @default(autoincrement())
  service       Service     @relation(fields: [serviceId], references: [id])
  serviceId     Int
  testimonial   Testimonial @relation(fields: [testimonialId], references: [id])
  testimonialId Int
  createdAt     DateTime    @default(now())
}

model SwiperCard {
  id        Int      @id @default(autoincrement())
  title     String
  image     String
  linkTo    String // misalnya link ke produk tertentu
  type      String // "home", "testimonial", dll.
  createdAt DateTime @default(now())
}

model CompanyInfo {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  milestones Milestone[]
}

model Milestone {
  id           Int         @id @default(autoincrement())
  title        String
  description  String
  dateAchieved DateTime
  companyInfo  CompanyInfo @relation(fields: [companyId], references: [id])
  companyId    Int
}
